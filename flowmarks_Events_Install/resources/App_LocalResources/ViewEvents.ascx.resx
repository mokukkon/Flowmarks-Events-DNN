<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlternatingItemTemplate.Text" xml:space="preserve">
    <value>&lt;div  class="ItemTemplate"&gt;
&lt;b&gt;[TIMESPAN]&lt;/b&gt;
&lt;div&gt;
[LABEL]
&lt;span class="grey"&gt;[EVENTDATE]&lt;/span&gt;
&lt;span class="grey"&gt;[CATEGORY]&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;</value>
    <comment>The alternating item template used to show the alternating entries, functions the same as the item template</comment>
  </data>
  <data name="ItemTemplate.Text" xml:space="preserve">
    <value>&lt;div class="ItemTemplate"&gt;
&lt;b&gt;[TIMESPAN]&lt;/b&gt;
&lt;div&gt;
[LABEL]
&lt;span class="grey"&gt;[EVENTDATE]&lt;/span&gt;
&lt;span class="grey"&gt;[CATEGORY]&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;</value>
    <comment>The item template used to show the items, the tokens are displayed in the help for the module and their text is NOTlocalized</comment>
  </data>
  <data name="lblComments.Help" xml:space="preserve">
    <value>Optional comments</value>
  </data>
  <data name="lblComments.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="lblLabel.Text" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h2&gt;flowmarks Inc. - Event Module&lt;/h2&gt;
&lt;h3&gt;View Event&lt;/h3&gt;

&lt;p class="Normal"&gt;To edit the Event display and e-mail notification messages you will need to modify the .ascx.resx files for this control.  The tokens available for your use include the following for the e-mail notification.&lt;/p&gt;

&lt;p class="Normal"&gt;
[NAME] - The posted name&lt;br /&gt;
[COMMENTS] - Their posted comments&lt;br /&gt;
[EMAIL] - Their provided e-mail&lt;br /&gt;
[LOCATION] - Their provided location&lt;br /&gt;
[RATING] - Their provided rating of your site&lt;br /&gt;
[WEBSITE] - Their website link&lt;br /&gt;
[EventURL] - The URL to your Event so you know where it came from&lt;/p&gt;</value>
  </data>
  <data name="cmdInsertEvent.Text" xml:space="preserve">
    <value>&lt;span&gt;Save&lt;/span&gt;</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Event Category</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="lblEventDate.Help" xml:space="preserve">
    <value>Event Date</value>
  </data>
  <data name="lblEventDate.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="lblMeasurement.Help" xml:space="preserve">
    <value>Numeric measurement related to the event, like 'height'</value>
  </data>
  <data name="lblMeasurement.Text" xml:space="preserve">
    <value>Measurement</value>
  </data>
  <data name="ReportEvents.Text" xml:space="preserve">
    <value>Reporting</value>
  </data>
  <data name="lblExternalId.Help" xml:space="preserve">
    <value>External identifier</value>
  </data>
  <data name="lblExternalId.Text" xml:space="preserve">
    <value>2nd Identifier</value>
  </data>
  <data name="lblMeasurement2.Help" xml:space="preserve">
    <value>Numeric measurement related to the event, like 'weight'</value>
  </data>
  <data name="lblMeasurement2.Text" xml:space="preserve">
    <value>2nd Measurement</value>
  </data>
  <data name="lblLabel2.Help" xml:space="preserve">
    <value>Free text field</value>
  </data>
  <data name="lblLabel2.Text" xml:space="preserve">
    <value>2nd Label</value>
  </data>
  <data name="lblRootCategory.Help" xml:space="preserve">
    <value>Root Category</value>
  </data>
  <data name="lblRootCategory.Text" xml:space="preserve">
    <value>Top</value>
  </data>
  <data name="lblSubCategory.Help" xml:space="preserve">
    <value>Subcategory</value>
  </data>
  <data name="lblSubCategory.Text" xml:space="preserve">
    <value>Sub</value>
  </data>
  <data name="EmptyItemBlock.Text" xml:space="preserve">
    <value>No Events Found</value>
  </data>
  <data name="EmptyItemHeader.Text" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="NewItemHeader.Text" xml:space="preserve">
    <value>New Event</value>
  </data>
  <data name="lnkEvents.Text" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="lblEventDate2.Text" xml:space="preserve">
    <value>2nd Date</value>
  </data>
  <data name="lblEventId.Text" xml:space="preserve">
    <value>ID</value>
  </data>
</root>