/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/** Create flowmarks_Category Table **/

if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_Category]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}flowmarks_Category]
		(
	        [CategoryID] [int] IDENTITY(1,1) NOT NULL ,
	        [UserID] [int] NULL,
	        [ParentID] [int] NULL ,
	        [Name] [nvarchar](200) NULL,
	        [Comments] [ntext] NULL,
	        [DateCreated] [datetime2](7) NULL,
	        [DateModified] [datetime2](7) NULL,
	        [IsDeleted] [bit] NOT NULL DEFAULT 0,
	        [IsHidden] [bit] NOT NULL DEFAULT 0,
	        [Label_Category] [nvarchar](200) NULL,
	        [Label_Label] [nvarchar](200) NULL,
	        [Label_Label2] [nvarchar](200) NULL,
	        [Label_EventDate] [nvarchar](200) NULL,
	        [Label_EventDate2] [nvarchar](200) NULL,
	        [Label_Measurement] [nvarchar](200) NULL,
	        [Label_Measurement2] [nvarchar](200) NULL,
	        [Label_ExternalId] [nvarchar](200) NULL,
	        [Label_Comments] [nvarchar](200) NULL
		)
	ALTER TABLE {databaseOwner}[{objectQualifier}flowmarks_Category] ADD CONSTRAINT [PK_{objectQualifier}flowmarks_Category] PRIMARY KEY CLUSTERED  ([CategoryID])



SET IDENTITY_INSERT [flowmarks_Category] ON
INSERT INTO [flowmarks_Category]
           (CategoryID
           ,[UserID]
           ,[ParentID]
           ,[Name]
           ,[Comments]
           ,[DateCreated]
           ,[DateModified]
           ,[IsDeleted])
     VALUES
           (-1
      ,-1
      ,NULL
      ,'No Category'
      ,NULL
      ,NULL
      ,NULL
      ,0)
SET IDENTITY_INSERT [flowmarks_Category] OFF
END
GO



/** Create flowmarks_Event Table **/

if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_Event]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}flowmarks_Event]
		(
	        [EventID] [int] IDENTITY(1,1) NOT NULL,
	        [ModuleID] [int] NOT NULL,
	        [UserID] [int] NOT NULL,
	        [CategoryID] [int] NOT NULL,
	        [Label] [nvarchar](200) NOT NULL,
	        [Label2] [nvarchar](200) NULL,
	        [EventDate] [datetime2](7) NOT NULL,
	        [EventDate2] [datetime2](7) NULL,
	        [Measurement] [float] NULL,
	        [Measurement2] [float] NULL,
	        [ExternalId] [varchar](50) NULL,
	        [Comments] [ntext] NULL,
	        [DateCreated] [datetime2](7) NOT NULL,
	        [DateModified] [datetime2](7) NULL,
	        [IsDeleted] [bit] NOT NULL DEFAULT 0
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}flowmarks_Event] ADD CONSTRAINT [PK_{objectQualifier}flowmarks_Event] PRIMARY KEY CLUSTERED  ([EventId])
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}flowmarks_Event] ON {databaseOwner}[{objectQualifier}flowmarks_Event] ([ModuleID])

		ALTER TABLE {databaseOwner}[{objectQualifier}flowmarks_Event] WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}flowmarks_Event_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE NOT FOR REPLICATION
		ALTER TABLE {databaseOwner}[{objectQualifier}flowmarks_Event] WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}flowmarks_Event_{objectQualifier}Category] FOREIGN KEY ([CategoryID]) REFERENCES {databaseOwner}[{objectQualifier}flowmarks_Category] ([CategoryID]) ON DELETE CASCADE NOT FOR REPLICATION
	END
GO


/** Drop Existing Stored Procedures **/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetEvents]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetEvents
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetDeletedEvents]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetDeletedEvents
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetEventsByCategory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetEventsByCategory
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetEvent
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_AddEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_AddEvent
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_UpdateEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_UpdateEvent
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_DeleteEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_DeleteEvent
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetCategories]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetCategories
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_GetCategory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_GetCategory
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_UpdateCategory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_UpdateCategory
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_DeleteCategory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_DeleteCategory
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}flowmarks_AddCategory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure {databaseOwner}{objectQualifier}flowmarks_AddCategory
GO


/** Create Stored Procedures **/


create procedure {databaseOwner}{objectQualifier}flowmarks_GetEvents

	@ModuleId int
	,@UserId int

as

select e.[EventID]
      ,e.[ModuleID]
      ,e.[UserID]
      ,e.[CategoryID]
      ,c.Name As Category
      ,e.[Label]
      ,e.[Label2]
      ,e.[EventDate]
      ,e.[EventDate2]
      ,e.[Measurement]
      ,e.[Measurement2]
      ,e.[ExternalId]
      ,e.[Comments]
      ,e.[DateCreated]
      ,e.[DateModified]
      ,e.[IsDeleted]
from flowmarks_Event e INNER JOIN flowmarks_Category c ON (e.CategoryID = c.CategoryID)
WHERE  ModuleId = @ModuleId
and e.UserID = @UserId
	AND e.IsDeleted = 0	
	AND c.IsHidden = 0 
ORDER BY EventDate DESC	
GO


CREATE procedure {databaseOwner}{objectQualifier}flowmarks_GetEventsByCategory

	@ModuleId int,
	@UserId int,
	@CategoryId int = NULL
as

select e.[EventID]
      ,e.[ModuleID]
      ,e.[UserID]
      ,c.[CategoryID]
      ,c.Name As Category
      ,c.Label_Category
      ,c.Label_Label
      ,c.Label_Label2
      ,c.Label_EventDate
      ,c.Label_EventDate2
      ,c.Label_Measurement
      ,c.Label_Measurement2
      ,c.Label_Comments
      ,c.Label_ExternalId
      ,e.Label
      ,e.[EventDate]
      ,e.[EventDate2]
      ,e.[Measurement]
      ,e.[Measurement2]
      ,e.[Label2]
      ,e.[ExternalId]
      ,e.Comments
      ,e.[DateCreated]
      ,e.[DateModified]
      ,e.[IsDeleted]
from {objectQualifier}flowmarks_Event e 
INNER JOIN {objectQualifier}flowmarks_Category c ON (e.CategoryID = c.CategoryID AND (e.UserID = c.UserID OR c.UserID = -1))
WHERE e.UserID = @UserId
and (@CategoryId IS NULL OR e.CategoryID = @CategoryId or c.ParentID = @CategoryId)
AND e.IsDeleted = 0
ORDER BY EventDate DESC	
GO

create procedure {databaseOwner}{objectQualifier}flowmarks_GetEvent

	@ModuleId int
	,@UserId int
    ,@EventId int

as

select [EventID]
      ,[ModuleID]
      ,[UserID]
      ,[CategoryID]
      ,(SELECT Name From flowmarks_Category where CategoryID = flowmarks_Event.CategoryID) As Category
      ,[Label]
      ,[Label2]
      ,[EventDate]
      ,[EventDate2]
      ,[Measurement]
      ,[Measurement2]
      ,[ExternalId]
      ,[Comments]
      ,[DateCreated]
      ,[DateModified]
      ,[IsDeleted]
from {objectQualifier}flowmarks_Event 
where  UserID = @UserId
	and EventId = @EventId
GO



create procedure {databaseOwner}{objectQualifier}flowmarks_AddEvent

	@ModuleId       int,
	@UserID         int,
	@CategoryID     int,
	@Label			nvarchar(200),
	@Label2         nvarchar(200),
	@EventDate      datetime2(7),
	@EventDate2     datetime2(7),
	@Measurement    float,
	@Measurement2   float,
	@ExternalId     varchar(50),	
	@Comments		ntext

as

insert into {objectQualifier}flowmarks_Event (
	[ModuleID]
      ,[UserID]
      ,[CategoryID]
      ,[Label]
      ,[Label2]
      ,[EventDate]
      ,[EventDate2]
      ,[Measurement]
      ,[Measurement2]
      ,[ExternalId]
      ,[Comments]
      ,[DateCreated]
      ,[DateModified]
      ,[IsDeleted]
) 
values (
	@ModuleId,
	@UserID,
	@CategoryID,
	@Label,
	@Label2,
	@EventDate,
	@EventDate2,
	@Measurement,
	@Measurement2,
	@ExternalId,
	@Comments,
	getdate(),
	NULL,
	0
)

GO

create procedure {databaseOwner}{objectQualifier}flowmarks_UpdateEvent

    @EventId        int,
    @ModuleId       int,
    @UserId         int,
	@CategoryID     int,
	@Label			nvarchar(200),
	@Label2         nvarchar(200),
	@EventDate      datetime2(7),
	@EventDate2     datetime2(7),
	@Measurement    float,
	@Measurement2   float,
	@ExternalId     varchar(50),	
	@Comments		ntext

as

update {objectQualifier}flowmarks_Event
set     Label		    = @Label,
		Label2          = ISNULL(@Label2, Label2),
		CategoryID	    = @CategoryID,
		EventDate	    = @EventDate,
		EventDate2	    = @EventDate2,
		Measurement	    = @Measurement,
		Measurement2    = @Measurement2,
		ExternalId	    = ISNULL(@ExternalId, Measurement2),
		Comments	    = @Comments,
		DateModified    = getdate()
where  UserID = @UserId
	and    EventId = @EventId

GO

create procedure {databaseOwner}{objectQualifier}flowmarks_DeleteEvent

	@ModuleId   int,
	@UserId     int,
    @EventId    int

as

update {objectQualifier}flowmarks_Event
set    IsDeleted	= 1
where  UserID = @UserId
and    EventId = @EventId

GO

--Add new procedure for the deleted
CREATE PROCEDURE {databaseOwner}[{objectQualifier}flowmarks_GetDeletedEvents]
	@ModuleId int,
	@UserId int
AS
select [EventID]
      ,[ModuleID]
      ,[UserID]
      ,[CategoryID]
      ,[Label]
      ,[Label2]
      ,[EventDate]
      ,[EventDate2]
      ,[Measurement]
      ,[Measurement2]
      ,[ExternalId]
      ,[Comments]
      ,[DateCreated]
      ,[DateModified]
      ,[IsDeleted]
from {objectQualifier}flowmarks_Event
WHERE  UserID = @UserId
	AND IsDeleted = 1
GO

--CATEGORIES--
CREATE procedure {databaseOwner}[{objectQualifier}flowmarks_GetCategories]

	@UserId int,
	@ParentId int = NULL,
	@IsHidden bit = NULL		

as

SELECT [CategoryID]
      ,[UserID]
      ,[ParentID]
      ,[Name]
      ,[Comments]
      ,[DateCreated]
      ,[DateModified]
      ,[IsDeleted]
      ,[IsHidden]
      ,[Label_Category]
      ,[Label_Label]
      ,[Label_Label2]
      ,[Label_EventDate]
      ,[Label_EventDate2]
      ,[Label_Measurement]
      ,[Label_Measurement2]
      ,[Label_ExternalId]
      ,[Label_Comments]
from {objectQualifier}flowmarks_Category
WHERE  (ParentId = @ParentId OR NULLIF(@ParentId,-1) IS NULL)
and (UserID = @UserId OR UserId = -1)
	AND IsDeleted = 0
	AND (IsHidden = @IsHidden OR @IsHidden IS NULL)
ORDER BY UserId, Name	

GO

CREATE procedure {databaseOwner}[{objectQualifier}flowmarks_GetCategory]

	@UserId int,
	@CategoryId int

as

SELECT [CategoryID]
      ,[UserID]
      ,[ParentID]
      ,[Name]
      ,[Comments]
      ,[DateCreated]
      ,[DateModified]
      ,[IsDeleted]
      ,IsHidden
      ,[Label_Category]
      ,[Label_Label]
      ,[Label_Label2]
      ,[Label_EventDate]
      ,[Label_EventDate2]
      ,[Label_Measurement]
      ,[Label_Measurement2]
      ,[Label_ExternalId]
      ,[Label_Comments]
from {objectQualifier}flowmarks_Category
WHERE  (CategoryId = @CategoryId)
and (UserID = @UserId OR UserId = -1)
ORDER BY UserId, [Name]	

GO

CREATE procedure {databaseOwner}[{objectQualifier}flowmarks_UpdateCategory]

    @CategoryID     int,
    @UserId			int,
	@ParentID		int,
	@Name			nvarchar(200),
	@Comments		ntext,
	@Label_Category nvarchar(200),
	@Label_Label     nvarchar(200),
	@Label_Label2   nvarchar(200),
	@Label_EventDate      nvarchar(200),
	@Label_EventDate2     nvarchar(200),
	@Label_Measurement    nvarchar(200),
	@Label_Measurement2   nvarchar(200),
	@Label_ExternalId     nvarchar(200),
	@Label_Comments       nvarchar(200),
	@IsHidden bit

as

update {objectQualifier}flowmarks_Category
set    Name			= @Name,
		ParentID	= @ParentID,
		Label_Category	= ISNULL(@Label_Category,Label_Category),
		Label_Label	    = ISNULL(@Label_Label,Label_Label),
		Label_Label2	= ISNULL(@Label_Label2, Label_Label2),
		Label_EventDate	= ISNULL(@Label_EventDate,Label_EventDate),
		Label_EventDate2	= ISNULL(@Label_EventDate2,Label_EventDate2),
		Label_Measurement	= ISNULL(@Label_Measurement,Label_Measurement),
		Label_Measurement2	= ISNULL(@Label_Measurement2, Label_Measurement2),
		Label_ExternalId	= ISNULL(@Label_ExternalId, Label_Measurement2),
		Label_Comments	= ISNULL(@Label_Comments, Label_Comments),
		Comments	    = @Comments,
		DateModified    = getdate(),
		IsHidden        = @IsHidden
where  
        CategoryID = @CategoryID	
	    and UserID = @UserId

GO

CREATE procedure {databaseOwner}[{objectQualifier}flowmarks_DeleteCategory]

	@UserId       int,
    @CategoryId   int

as

update {objectQualifier}flowmarks_Category
set    IsDeleted	= 1
where  UserID = @UserId
and    CategoryId = @CategoryId

GO


CREATE procedure {databaseOwner}[{objectQualifier}flowmarks_AddCategory]

    @UserId			int,
	@ParentID		int,
	@Name			nvarchar(200),
	@Comments		ntext,
	@Label_Category       nvarchar(200),
	@Label_Label           nvarchar(200),
	@Label_Label2         nvarchar(200),
	@Label_EventDate      nvarchar(200),
	@Label_EventDate2     nvarchar(200),
	@Label_Measurement    nvarchar(200),
	@Label_Measurement2   nvarchar(200),
	@Label_ExternalId     nvarchar(200),
	@Label_Comments       nvarchar(200),
	@IsHidden bit


as

insert into {objectQualifier}flowmarks_Category (
	[UserID]
	,[ParentID]
	,[Name]
	,[Comments]
	,[DateCreated]
	,[DateModified]
	,[IsDeleted]
	,[IsHidden]
	,[Label_Category]
	,[Label_Label]
	,[Label_Label2]
	,[Label_EventDate]
	,[Label_EventDate2]
	,[Label_Measurement]
	,[Label_Measurement2]
	,[Label_ExternalId]
	,[Label_Comments]
) 
values (
	@UserID,
	@ParentID,
	@Name,
	@Comments,
	GETDATE(),
	NULL,
	0,
	@IsHidden,
	@Label_Category,
	@Label_Label,
	@Label_Label2,
	@Label_EventDate,
	@Label_EventDate2,
	@Label_Measurement,
	@Label_Measurement2,
	@Label_ExternalId,
	@Label_Comments
)

GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/